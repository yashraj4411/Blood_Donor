{"ast":null,"code":"import _objectSpread from \"D:/Blood_Donation_Website/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { warning } from 'motion-utils';\nimport { hex } from '../../value/types/color/hex.mjs';\nimport { hsla } from '../../value/types/color/hsla.mjs';\nimport { hslaToRgba } from '../../value/types/color/hsla-to-rgba.mjs';\nimport { rgba } from '../../value/types/color/rgba.mjs';\nimport { mixImmediate } from './immediate.mjs';\nimport { mixNumber } from './number.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n  const fromExpo = from * from;\n  const expo = v * (to * to - fromExpo) + fromExpo;\n  return expo < 0 ? 0 : Math.sqrt(expo);\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = v => colorTypes.find(type => type.test(v));\nfunction asRGBA(color) {\n  const type = getColorType(color);\n  warning(Boolean(type), \"'\".concat(color, \"' is not an animatable color. Use the equivalent color code instead.\"), \"color-not-animatable\");\n  if (!Boolean(type)) return false;\n  let model = type.parse(color);\n  if (type === hsla) {\n    // TODO Remove this cast - needed since Motion's stricter typing\n    model = hslaToRgba(model);\n  }\n  return model;\n}\nconst mixColor = (from, to) => {\n  const fromRGBA = asRGBA(from);\n  const toRGBA = asRGBA(to);\n  if (!fromRGBA || !toRGBA) {\n    return mixImmediate(from, to);\n  }\n  const blended = _objectSpread({}, fromRGBA);\n  return v => {\n    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n    blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\n    return rgba.transform(blended);\n  };\n};\nexport { mixColor, mixLinearColor };","map":{"version":3,"names":["warning","hex","hsla","hslaToRgba","rgba","mixImmediate","mixNumber","mixLinearColor","from","to","v","fromExpo","expo","Math","sqrt","colorTypes","getColorType","find","type","test","asRGBA","color","Boolean","concat","model","parse","mixColor","fromRGBA","toRGBA","blended","_objectSpread","red","green","blue","alpha","transform"],"sources":["D:/Blood_Donation_Website/client/node_modules/motion-dom/dist/es/utils/mix/color.mjs"],"sourcesContent":["import { warning } from 'motion-utils';\r\nimport { hex } from '../../value/types/color/hex.mjs';\r\nimport { hsla } from '../../value/types/color/hsla.mjs';\r\nimport { hslaToRgba } from '../../value/types/color/hsla-to-rgba.mjs';\r\nimport { rgba } from '../../value/types/color/rgba.mjs';\r\nimport { mixImmediate } from './immediate.mjs';\r\nimport { mixNumber } from './number.mjs';\r\n\r\n// Linear color space blending\r\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\r\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\r\nconst mixLinearColor = (from, to, v) => {\r\n    const fromExpo = from * from;\r\n    const expo = v * (to * to - fromExpo) + fromExpo;\r\n    return expo < 0 ? 0 : Math.sqrt(expo);\r\n};\r\nconst colorTypes = [hex, rgba, hsla];\r\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\r\nfunction asRGBA(color) {\r\n    const type = getColorType(color);\r\n    warning(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`, \"color-not-animatable\");\r\n    if (!Boolean(type))\r\n        return false;\r\n    let model = type.parse(color);\r\n    if (type === hsla) {\r\n        // TODO Remove this cast - needed since Motion's stricter typing\r\n        model = hslaToRgba(model);\r\n    }\r\n    return model;\r\n}\r\nconst mixColor = (from, to) => {\r\n    const fromRGBA = asRGBA(from);\r\n    const toRGBA = asRGBA(to);\r\n    if (!fromRGBA || !toRGBA) {\r\n        return mixImmediate(from, to);\r\n    }\r\n    const blended = { ...fromRGBA };\r\n    return (v) => {\r\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\r\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\r\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\r\n        blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\r\n        return rgba.transform(blended);\r\n    };\r\n};\r\n\r\nexport { mixColor, mixLinearColor };\r\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,GAAG,QAAQ,iCAAiC;AACrD,SAASC,IAAI,QAAQ,kCAAkC;AACvD,SAASC,UAAU,QAAQ,0CAA0C;AACrE,SAASC,IAAI,QAAQ,kCAAkC;AACvD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,SAAS,QAAQ,cAAc;;AAExC;AACA;AACA;AACA,MAAMC,cAAc,GAAGA,CAACC,IAAI,EAAEC,EAAE,EAAEC,CAAC,KAAK;EACpC,MAAMC,QAAQ,GAAGH,IAAI,GAAGA,IAAI;EAC5B,MAAMI,IAAI,GAAGF,CAAC,IAAID,EAAE,GAAGA,EAAE,GAAGE,QAAQ,CAAC,GAAGA,QAAQ;EAChD,OAAOC,IAAI,GAAG,CAAC,GAAG,CAAC,GAAGC,IAAI,CAACC,IAAI,CAACF,IAAI,CAAC;AACzC,CAAC;AACD,MAAMG,UAAU,GAAG,CAACd,GAAG,EAAEG,IAAI,EAAEF,IAAI,CAAC;AACpC,MAAMc,YAAY,GAAIN,CAAC,IAAKK,UAAU,CAACE,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAACT,CAAC,CAAC,CAAC;AACnE,SAASU,MAAMA,CAACC,KAAK,EAAE;EACnB,MAAMH,IAAI,GAAGF,YAAY,CAACK,KAAK,CAAC;EAChCrB,OAAO,CAACsB,OAAO,CAACJ,IAAI,CAAC,MAAAK,MAAA,CAAMF,KAAK,2EAAwE,sBAAsB,CAAC;EAC/H,IAAI,CAACC,OAAO,CAACJ,IAAI,CAAC,EACd,OAAO,KAAK;EAChB,IAAIM,KAAK,GAAGN,IAAI,CAACO,KAAK,CAACJ,KAAK,CAAC;EAC7B,IAAIH,IAAI,KAAKhB,IAAI,EAAE;IACf;IACAsB,KAAK,GAAGrB,UAAU,CAACqB,KAAK,CAAC;EAC7B;EACA,OAAOA,KAAK;AAChB;AACA,MAAME,QAAQ,GAAGA,CAAClB,IAAI,EAAEC,EAAE,KAAK;EAC3B,MAAMkB,QAAQ,GAAGP,MAAM,CAACZ,IAAI,CAAC;EAC7B,MAAMoB,MAAM,GAAGR,MAAM,CAACX,EAAE,CAAC;EACzB,IAAI,CAACkB,QAAQ,IAAI,CAACC,MAAM,EAAE;IACtB,OAAOvB,YAAY,CAACG,IAAI,EAAEC,EAAE,CAAC;EACjC;EACA,MAAMoB,OAAO,GAAAC,aAAA,KAAQH,QAAQ,CAAE;EAC/B,OAAQjB,CAAC,IAAK;IACVmB,OAAO,CAACE,GAAG,GAAGxB,cAAc,CAACoB,QAAQ,CAACI,GAAG,EAAEH,MAAM,CAACG,GAAG,EAAErB,CAAC,CAAC;IACzDmB,OAAO,CAACG,KAAK,GAAGzB,cAAc,CAACoB,QAAQ,CAACK,KAAK,EAAEJ,MAAM,CAACI,KAAK,EAAEtB,CAAC,CAAC;IAC/DmB,OAAO,CAACI,IAAI,GAAG1B,cAAc,CAACoB,QAAQ,CAACM,IAAI,EAAEL,MAAM,CAACK,IAAI,EAAEvB,CAAC,CAAC;IAC5DmB,OAAO,CAACK,KAAK,GAAG5B,SAAS,CAACqB,QAAQ,CAACO,KAAK,EAAEN,MAAM,CAACM,KAAK,EAAExB,CAAC,CAAC;IAC1D,OAAON,IAAI,CAAC+B,SAAS,CAACN,OAAO,CAAC;EAClC,CAAC;AACL,CAAC;AAED,SAASH,QAAQ,EAAEnB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}